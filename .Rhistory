output = "kableExtra")
# cambio de referencia
vol$sex=relevel(vol$sex,ref = "male")
#regresion
rlog1=glm(h1, data=vol,family = binomial)
modelrl=list('Ser Voluntario (I)'=rlog1)
modelsummary(modelrl,
title = "Regresión Logística (con cambio de referencia en sexo)",
stars = TRUE,
output = "kableExtra")
sexF=coef(rlog1)["sexfemale"]
exp(sexF)
### second hypothesis
h2=formula(volunteer~sex + neuroticism)
rlog2=glm(h2, data=vol,family = binomial)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
h3=formula(volunteer~sex + neuroticism + extraversion)
rlog3=glm(h3, data=vol,family = binomial)
summary(rlog3)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
vol$sex_AsNum=as.numeric(vol$sex) # it is a factor.
sdVIs=apply(vol[,c("sex_AsNum","neuroticism", "extraversion")],2,sd)
DF=list(LogitSt=sdVIs*coef(rlog3)[c(2,3,4)])%>%
data.frame()
DF%>% kable(caption = "Coeficientes Standarizados (ordenar vía valores absolutos)")%>%
kableExtra::kable_styling(full_width = F)
library(lmtest)
lrtest(rlog1,rlog2, rlog3) %>%
kable(caption = "Tabla LRT para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(ggplot2)
dotwhisker::dwplot(list(Logit_I=rlog1,Logit_II=rlog2,Logit_III=rlog3),
exp=T) + #exponenciados!
scale_y_discrete(labels=c("extraversion",
"neuroticism",
"sex (ref: male)")) +
scale_color_discrete(name="Modelos para:\nSer Voluntario") +
geom_vline(xintercept = 1,
colour = "grey60",
linetype = 2)
vol$sexNum=NULL
predictedProbs <- predict(rlog3, vol,type = "response")
vol$predicted=ifelse(predictedProbs>0.5,"yes","no")
confusionMatrix=table(predictedScores =  vol$predicted,
actuals = vol$volunteer)
#  a html
confusionMatrix%>%
kable(caption = "Matriz de Confusión (simple)")%>%
kableExtra::kable_styling(full_width = F)
library(cvms)
plot_confusion_matrix(as.data.frame(confusionMatrix),
target_col = "actuals",
prediction_col = "predictedScores",
counts_col = "Freq")
vol$predicted_TF=ifelse(vol$predicted=='yes',T,F)
vol$actuals_TF=ifelse(vol$volunteer=='yes',T,F)
vol$volunteer
vol$predicted
caret::sensitivity(vol$predicted),
caret::sensitivity(vol$predicted,
vol$volunteer)
caret::sensitivity(vol$predicted_TF,
vol$volunteer_TF)
vol$predicted_TF
vol$predicted_TF=ifelse(vol$predicted=='yes',T,F)
vol$volunteer_TF=ifelse(vol$volunteer=='yes',T,F)
vol$sexNum=NULL
predictedProbs <- predict(rlog3, vol,type = "response")
vol$predicted=ifelse(predictedProbs>0.5,"yes","no")
confusionMatrix=table(predicted =  vol$predicted,
volunteer = vol$volunteer)
#  a html
confusionMatrix%>%
kable(caption = "Matriz de Confusión (simple)")%>%
kableExtra::kable_styling(full_width = F)
library(cvms)
plot_confusion_matrix(as.data.frame(confusionMatrix),
target_col = "volunteer",
prediction_col = "predicted",
counts_col = "Freq")
vol$predicted_01=as.factor(ifelse(vol$predicted=='yes',1,0))
vol$volunteer_01=as.factor(ifelse(vol$volunteer=='yes',1,0))
caret::sensitivity(vol$predicted_01,
vol$volunteer_01)
rm(list = ls()) # clear memory
knitr::knit_hooks$set(inline = as.character) # inline as string
gitLink="https://vincentarelbundock.github.io/Rdatasets/csv/carData/Cowles.csv"
vol=read.csv(gitLink)[,-1] #no first column
# formatting:
vol[,c(3,4)]=lapply(vol[,c(3,4)],as.factor)
# display table
library(magrittr) # needed for pipe %>%
vol%>%
rmarkdown::paged_table()
library(summarytools)
library(kableExtra)
# usemos la función "dfSummary" de paquete "summarytools"
dfSummary(vol,
plain.ascii  = FALSE,
varnumbers = FALSE,
style        = "grid",
graph.col=F,
na.col    = FALSE) %>%
kable(caption = "Descriptivos Univariados")%>%
kable_styling(full_width = F)
dep=vol$volunteer # a la fila
ind=vol$sex # a la columna
volsexTable=table(dep,ind,dnn = c('volunteer','sex'))
### suma por columna
addmargins(volsexTable,margin = 1)%>%
kable(caption = "Tabla de Contingencia: 'Sexo' y 'Ser Voluntario'")%>%
kableExtra::kable_styling(full_width = F)
ProbMujVol=volsexTable[2,1]/sum(volsexTable[,1])
MASS::fractions(ProbMujVol)
ProbMujVol
OddsMujVol=volsexTable[2,1]/volsexTable[1,1]
MASS::fractions(OddsMujVol)
OddsMujVol
ProbMujVol/(1-ProbMujVol)
ProbHomVol=volsexTable[2,2]/sum(volsexTable[,2])
MASS::fractions(ProbHomVol)
ProbHomVol
OddsHomVol=ProbHomVol/(1-ProbHomVol)
OddsHomVol
(OR_MujHom=OddsMujVol/OddsHomVol)
MASS::fractions(OddsMujVol/OddsHomVol)
mosaicplot( t(volsexTable),col = c("orange", "green"),main = "")
### semilla
set.seed(2019)
### first hypothesis
h1=formula(volunteer~sex)
#regression
rlog1=glm(h1, data=vol,family = binomial)
modelrl=list('Ser Voluntario (I)'=rlog1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelrl,
title = "Regresión Logística",
stars = TRUE,
output = "kableExtra")
# cambio de referencia
vol$sex=relevel(vol$sex,ref = "male")
#regresion
rlog1=glm(h1, data=vol,family = binomial)
modelrl=list('Ser Voluntario (I)'=rlog1)
modelsummary(modelrl,
title = "Regresión Logística (con cambio de referencia en sexo)",
stars = TRUE,
output = "kableExtra")
sexF=coef(rlog1)["sexfemale"]
exp(sexF)
### second hypothesis
h2=formula(volunteer~sex + neuroticism)
rlog2=glm(h2, data=vol,family = binomial)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
h3=formula(volunteer~sex + neuroticism + extraversion)
rlog3=glm(h3, data=vol,family = binomial)
summary(rlog3)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
vol$sex_AsNum=as.numeric(vol$sex) # it is a factor.
sdVIs=apply(vol[,c("sex_AsNum","neuroticism", "extraversion")],2,sd)
DF=list(LogitSt=sdVIs*coef(rlog3)[c(2,3,4)])%>%
data.frame()
DF%>% kable(caption = "Coeficientes Standarizados (ordenar vía valores absolutos)")%>%
kableExtra::kable_styling(full_width = F)
library(lmtest)
lrtest(rlog1,rlog2, rlog3) %>%
kable(caption = "Tabla LRT para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(ggplot2)
dotwhisker::dwplot(list(Logit_I=rlog1,Logit_II=rlog2,Logit_III=rlog3),
exp=T) + #exponenciados!
scale_y_discrete(labels=c("extraversion",
"neuroticism",
"sex (ref: male)")) +
scale_color_discrete(name="Modelos para:\nSer Voluntario") +
geom_vline(xintercept = 1,
colour = "grey60",
linetype = 2)
vol$sexNum=NULL
predictedProbs <- predict(rlog3, vol,type = "response")
vol$predicted=ifelse(predictedProbs>0.5,"yes","no")
confusionMatrix=table(predicted =  vol$predicted,
volunteer = vol$volunteer)
#  a html
confusionMatrix%>%
kable(caption = "Matriz de Confusión (simple)")%>%
kableExtra::kable_styling(full_width = F)
library(cvms)
plot_confusion_matrix(as.data.frame(confusionMatrix),
target_col = "volunteer",
prediction_col = "predicted",
counts_col = "Freq")
vol$predicted_01=as.factor(ifelse(vol$predicted=='yes',1,0))
vol$volunteer_01=as.factor(ifelse(vol$volunteer=='yes',1,0))
caret::sensitivity(vol$predicted_01,
vol$volunteer_01)
caret::specificity(as.factor(vol$predicted),
as.factor(vol$volunteer))
cf <- caret::confusionMatrix(data=vol$predicted_01),
cf <- caret::confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01)
print(cf)
library(caret)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive=1
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive=1)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive="1")
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01)
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,
positive="1") # clave!!
cf
ToInput1 <- data.frame(sex=factor(c("female")),
neuroticism=13, extraversion=8)
predict(object = rlog3, newdata = ToInput1, type = "response")
ToInput2 <- data.frame(sex=factor(c("female","male")),
neuroticism=13, extraversion=8)
predict(object = rlog3, newdata = ToInput2, type = "response")
ToInput3 <- data.frame(sex=factor(c("female","female")),
neuroticism=c(13,10), extraversion=c(8,21))
predict(object = rlog3, newdata = ToInput3, type = "response")
head(vol$predicted)
# interpracion usando marginal effects:
library(margins)
#
marginalsData=summary(margins(rlog3))
marginalsData%>% kable(caption = "Efectos Marginales Promedio (AME)- Modelo III") %>%kableExtra::kable_styling(full_width = T)
library(ggplot2)
base= ggplot(marginalsData,aes(x=factor, y=AME)) + geom_point()
base +  geom_errorbar(aes(ymin=lower, ymax=upper))
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas -I/II/III \n(Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Comparando Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
h3=formula(volunteer~sex + neuroticism + extraversion)
rlog3=glm(h3, data=vol,family = binomial)
summary(rlog3)
setwd("/Users/JoseManuel/Documents/GITHUBs/PUCP/ASIES/codes")
?rm
library(sf)
install.packages("sf")
# import os, geopandas as gpd
# countries=gpd.read_file(os.path.join("maps","World_Countries","World_Countries.shp"))
rm(list = ls())
library(sf)
folder1 ="maps"
folder2="World_Countries"
fileMap ="World_Countries.shp"
locationMap = file.path (folder1,folder2,fileMap)
countries=st_read(locationMap)
# what is it?
#type(countries)
str(countries)
# what is it?
#type(countries)
typeof(countries)
str(countries)
dim(countries)
# names
# countries.columns
names(countries)
# some content
# countries.head()
head(countries)
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[!complete.cases(countries),]
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[!complete.cases(countries)]
countries
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[!complete.cases(countries),]
countries[!complete.cases(countries)]
# what is it?
#type(countries)
class(countries)
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[is.na(countries)]
is.na(countries)
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[is.na(countries)]
# types
# countries.info()
str(countries)
library ( ggplot2 )
base = ggplot ( data = countries) + theme_classic ()
basemap = base + geom _sf( fill ='black ', #color of polygon
library ( ggplot2 )
base = ggplot ( data = countries) + theme_classic ()
basemap = base + geom_sf( fill ='black ', #color of polygon
+ color =NA) #color of border
library ( ggplot2 )
base = ggplot ( data = countries) + theme_classic ()
basemap = base + geom_sf( fill ='black ',color =NA) #color of border
library ( ggplot2 )
base = ggplot ( data = countries) + theme_classic ()
basemap = base + geom_sf( fill ='black ',color =NA) #color of border
basemap
library ( ggplot2 )
base = ggplot (data = countries) + theme_classic ()
basemap = base + geom_sf() #color of border
basemap
library ( ggplot2 )
base = ggplot (data = countries) #+ theme_classic ()
basemap = base + geom_sf() #color of border
basemap
library ( ggplot2 )
ggplot(data = countries) + geom_sf()
# rivers=gpd.read_file(os.path.join("maps","World_Hydrography","World_Hydrography.shp"))
# cities=gpd.read_file(os.path.join("maps","World_Cities","World_Cities.shp"))
riverFile ="World_Hydrography.shp"
cityFile ="World_Cities.shp"
locationRiver = file.path (folder1,folder2,countryFile)
# rivers=gpd.read_file(os.path.join("maps","World_Hydrography","World_Hydrography.shp"))
# cities=gpd.read_file(os.path.join("maps","World_Cities","World_Cities.shp"))
riverFile ="World_Hydrography.shp"
cityFile ="World_Cities.shp"
locationRiver = file.path (folder1,folder2,riverFile)
locationCity = file.path (folder1,folder2,cityFile)
rivers=st_read(locationRiver)
# import os, geopandas as gpd
# countries=gpd.read_file(os.path.join("maps","World_Countries","World_Countries.shp"))
rm(list = ls())
library(sf)
folder1 ="maps"
folder2="World_Countries"
countryFile ="World_Countries.shp"
locationCity = file.path (folder1,folder2,countryFile)
countries=st_read(locationCity)
# what is it?
#type(countries)
class(countries)
# dimensions
#countries.shape
dim(countries)
# names
# countries.columns
names(countries)
# some content
# countries.head()
head(countries)
# any missing values?
# countries[countries.isna().any(axis=1)]
countries[is.na(countries)]
# types
# countries.info()
str(countries)
library ( ggplot2 )
ggplot(data = countries) + geom_sf()
# rivers=gpd.read_file(os.path.join("maps","World_Hydrography","World_Hydrography.shp"))
# cities=gpd.read_file(os.path.join("maps","World_Cities","World_Cities.shp"))
riverFile ="World_Hydrography.shp"
cityFile ="World_Cities.shp"
locationRiver = file.path (folder1,folder2,riverFile)
locationCity = file.path (folder1,folder2,cityFile)
rivers=st_read(locationRiver)
# rivers=gpd.read_file(os.path.join("maps","World_Hydrography","World_Hydrography.shp"))
# cities=gpd.read_file(os.path.join("maps","World_Cities","World_Cities.shp"))
folder3="World_Hydrography"
folder4="World_Cities"
riverFile ="World_Hydrography.shp"
cityFile ="World_Cities.shp"
locationRiver = file.path (folder1,folder3,riverFile)
locationCity = file.path (folder1,folder4,cityFile)
rivers=st_read(locationRiver)
cities=st_read(locationCity)
# visualizing rivers
# rivers.plot()
ggplot(data = rivers) + geom_sf()
# visualizing cities
# cities.plot()
ggplot(data = cities) + geom_sf()
# countries.plot(facecolor="azure",#color of polygon fill
#                edgecolor='black', #color of lines
#                linewidth=0.1) #thickness of lines
ggplot(data = countries) + geom_sf()
# countries.plot(facecolor="azure",#color of polygon fill
#                edgecolor='black', #color of lines
#                linewidth=0.1) #thickness of lines
ggplot(data = countries) + geom_sf(fill='azure')
worldMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/worldMaps.gpkg'
library(sf)
countries=sf::st_read(worldMaps,layer='countries')
st_layers(worldMaps)
worldMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(worldMaps)
brazilMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(brazilMaps)
rm(list = ls())
brazilMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(brazilMaps)
rm(list = ls())
brazilMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(brazilMaps)
rm(list = ls())
brazilMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(brazilMaps)
borders=sf::st_read(brazilMaps,layer='borders')
rivers=sf::st_read(brazilMaps,layer='rivers')
cities=sf::st_read(brazilMaps,layer='cities')
rm(list = ls())
brazilMaps='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/brazilMaps.gpkg'
library(sf)
st_layers(brazilMaps)
borders=sf::st_read(brazilMaps,layer='borders')
rivers=sf::st_read(brazilMaps,layer='rivers')
cities=sf::st_read(brazilMaps,layer='cities')
ggplot(borders) + geom_sf()
library(ggplot2)
baseMap=ggplot(borders) + geom_sf()
layer1=baseMap + geom_sf(data=rivers)
layerFin=layer1 + geom_sf(data=cities)
layerFin
saveRDS(layerFin, file = "Brazil_3Layers.rds")
