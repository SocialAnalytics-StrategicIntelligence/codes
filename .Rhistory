# display table
library(magrittr) # needed for pipe %>%
vol%>%
rmarkdown::paged_table()
library(summarytools)
library(kableExtra)
# usemos la función "dfSummary" de paquete "summarytools"
dfSummary(vol,
plain.ascii  = FALSE,
varnumbers = FALSE,
style        = "grid",
graph.col=F,
na.col    = FALSE) %>%
kable(caption = "Descriptivos Univariados")%>%
kable_styling(full_width = F)
dep=vol$volunteer # a la fila
ind=vol$sex # a la columna
volsexTable=table(dep,ind,dnn = c('volunteer','sex'))
### suma por columna
addmargins(volsexTable,margin = 1)%>%
kable(caption = "Tabla de Contingencia: 'Sexo' y 'Ser Voluntario'")%>%
kableExtra::kable_styling(full_width = F)
ProbMujVol=volsexTable[2,1]/sum(volsexTable[,1])
MASS::fractions(ProbMujVol)
ProbMujVol
OddsMujVol=volsexTable[2,1]/volsexTable[1,1]
MASS::fractions(OddsMujVol)
OddsMujVol
ProbMujVol/(1-ProbMujVol)
ProbHomVol=volsexTable[2,2]/sum(volsexTable[,2])
MASS::fractions(ProbHomVol)
ProbHomVol
OddsHomVol=ProbHomVol/(1-ProbHomVol)
OddsHomVol
(OR_MujHom=OddsMujVol/OddsHomVol)
MASS::fractions(OddsMujVol/OddsHomVol)
mosaicplot( t(volsexTable),col = c("orange", "green"),main = "")
### semilla
set.seed(2019)
### first hypothesis
h1=formula(volunteer~sex)
#regression
rlog1=glm(h1, data=vol,family = binomial)
modelrl=list('Ser Voluntario (I)'=rlog1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelrl,
title = "Regresión Logística",
stars = TRUE,
output = "kableExtra")
# cambio de referencia
vol$sex=relevel(vol$sex,ref = "male")
#regresion
rlog1=glm(h1, data=vol,family = binomial)
modelrl=list('Ser Voluntario (I)'=rlog1)
modelsummary(modelrl,
title = "Regresión Logística (con cambio de referencia en sexo)",
stars = TRUE,
output = "kableExtra")
sexF=coef(rlog1)["sexfemale"]
exp(sexF)
### second hypothesis
h2=formula(volunteer~sex + neuroticism)
rlog2=glm(h2, data=vol,family = binomial)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
h3=formula(volunteer~sex + neuroticism + extraversion)
rlog3=glm(h3, data=vol,family = binomial)
summary(rlog3)
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
vol$sex_AsNum=as.numeric(vol$sex) # it is a factor.
sdVIs=apply(vol[,c("sex_AsNum","neuroticism", "extraversion")],2,sd)
DF=list(LogitSt=sdVIs*coef(rlog3)[c(2,3,4)])%>%
data.frame()
DF%>% kable(caption = "Coeficientes Standarizados (ordenar vía valores absolutos)")%>%
kableExtra::kable_styling(full_width = F)
library(lmtest)
lrtest(rlog1,rlog2, rlog3) %>%
kable(caption = "Tabla LRT para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(ggplot2)
dotwhisker::dwplot(list(Logit_I=rlog1,Logit_II=rlog2,Logit_III=rlog3),
exp=T) + #exponenciados!
scale_y_discrete(labels=c("extraversion",
"neuroticism",
"sex (ref: male)")) +
scale_color_discrete(name="Modelos para:\nSer Voluntario") +
geom_vline(xintercept = 1,
colour = "grey60",
linetype = 2)
vol$sexNum=NULL
predictedProbs <- predict(rlog3, vol,type = "response")
vol$predicted=ifelse(predictedProbs>0.5,"yes","no")
confusionMatrix=table(predicted =  vol$predicted,
volunteer = vol$volunteer)
#  a html
confusionMatrix%>%
kable(caption = "Matriz de Confusión (simple)")%>%
kableExtra::kable_styling(full_width = F)
library(cvms)
plot_confusion_matrix(as.data.frame(confusionMatrix),
target_col = "volunteer",
prediction_col = "predicted",
counts_col = "Freq")
vol$predicted_01=as.factor(ifelse(vol$predicted=='yes',1,0))
vol$volunteer_01=as.factor(ifelse(vol$volunteer=='yes',1,0))
caret::sensitivity(vol$predicted_01,
vol$volunteer_01)
caret::specificity(as.factor(vol$predicted),
as.factor(vol$volunteer))
cf <- caret::confusionMatrix(data=vol$predicted_01),
cf <- caret::confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01)
print(cf)
library(caret)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive=1
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive=1)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,positive="1")
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01)
print(cf)
library(caret)
cf <- confusionMatrix(data=vol$predicted_01,
reference=vol$volunteer_01,
positive="1") # clave!!
cf
ToInput1 <- data.frame(sex=factor(c("female")),
neuroticism=13, extraversion=8)
predict(object = rlog3, newdata = ToInput1, type = "response")
ToInput2 <- data.frame(sex=factor(c("female","male")),
neuroticism=13, extraversion=8)
predict(object = rlog3, newdata = ToInput2, type = "response")
ToInput3 <- data.frame(sex=factor(c("female","female")),
neuroticism=c(13,10), extraversion=c(8,21))
predict(object = rlog3, newdata = ToInput3, type = "response")
head(vol$predicted)
# interpracion usando marginal effects:
library(margins)
#
marginalsData=summary(margins(rlog3))
marginalsData%>% kable(caption = "Efectos Marginales Promedio (AME)- Modelo III") %>%kableExtra::kable_styling(full_width = T)
library(ggplot2)
base= ggplot(marginalsData,aes(x=factor, y=AME)) + geom_point()
base +  geom_errorbar(aes(ymin=lower, ymax=upper))
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas -I/II/III \n(Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
modelsrl=list('Ser Voluntario (I)'=rlog1,
'Ser Voluntario (II)'=rlog2,
'Ser Voluntario (III)'=rlog3)
f <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero,
exponentiate = T,
statistic = 'conf.int',
title = "Comparando Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
gof_map = c("nobs","aic","bic","rmse","logLik"), #comparar
gof_omit = c("F"),
output = "kableExtra")
h3=formula(volunteer~sex + neuroticism + extraversion)
rlog3=glm(h3, data=vol,family = binomial)
summary(rlog3)
rm(list = ls())
worldMap='https://github.com/SocialAnalytics-StrategicIntelligence/codes/raw/main/maps/worlMapData.gpkg'
countries=sf::st_read(worldMap,layer='countries')
library(ggplot2)
base=countries
base$Total_ei5=NULL
baseMap=ggplot() + geom_sf(data=base) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),
color=NA)
choro1 + facet_wrap(~Total_jc5_cat)
base=countries
base$Total_ei5=NULL
baseMap=ggplot() + geom_sf(data=base) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat))
choro1 + facet_wrap(~Total_jc5_cat)
base=countries
base$Total_jc5_cat=NULL
baseMap=ggplot() + geom_sf(data=base) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat))
choro1 + facet_wrap(~Total_jc5_cat)
choro1 + facet_wrap(~Total_jc5_cat) + guides(fill=NA)
choro1 + facet_wrap(~Total_jc5_cat) + guides(fill=F)
choro1 + facet_wrap(~Total_jc5_cat) + guides(fill=NULL)
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat)
choro1 + facet_wrap(~Total_jc5_cat) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, fill='white') + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, fill='white') + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat,ncol = 2) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, color='grey90',fill='white') + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat,ncol = 2) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, color='grey60',fill='white',lwd = 0.25) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat,ncol = 2) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, color='grey60',fill='white',lwd = 0.1) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat,ncol = 2) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, color='grey60',fill='white',lwd = 0.1) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),lwd = 0.1,show.legend = F)
choro1 + facet_wrap(~Total_jc5_cat,ncol = 2) +
scale_fill_manual(values = c("green", "blue", "grey","red","black"))
baseMap=ggplot() + geom_sf(data=base, color='grey60',fill='white',lwd = 0.1) + theme_minimal()
choro1=baseMap + geom_sf(data=countries,aes(fill=Total_jc5_cat),lwd = 0.1,show.legend = F)
choro1=choro1 + facet_wrap(~Total_jc5_cat,ncol = 2)
choro1=choro1 + scale_fill_manual(values = c("green", "blue", "grey","red","black"))
choro1
saveRDS(layerRivers, file = "choro1.rds")
saveRDS(choro1, file = "choro1.rds")
names(countries)
C1_SecurityApparatusC1_SecurityApparatusC1_SecurityApparatus
baseScatter=ggplot(data=countries) + theme_linedraw()
scatter1=baseScatter+geom_text(aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites,
size=C3_GroupGrievance,
color=continent,
label=name))
scatter1
baseScatter=ggplot(data=countries) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites,
size=C3_GroupGrievance,
color=continent))
scatter1
baseScatter=ggplot(data=countries) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites,
size=C3_GroupGrievance))
scatter1 + facet_wrap(~continent)
library(ggrepel)
tapply(countries$Total, countries$continent, max)
aggregate(countries$Total, by = list(countries$continent), max)
aggregate(countries$Total, by = list(countries$continent), which.max)
library(dplyr)
countries %>% group_by(continent) %>% top_n(1, Total)
countriesWorst=countries %>% group_by(continent) %>% top_n(1, Total)
countriesWorst$name
View(countries)
?top_n
countriesBest=countries %>% group_by(continent) %>% top_n(-1, Total)
countriesBest$name
c(countriesWorst$name,countriesBest$name)
ifelse(countries$name%in%countriesWorst$name)
scatter1 + geom_text_repel(aes(label=ifelse(countries$name%in%countriesWorst$name,countries$name,"")))
scatter1 + geom_text_repel(aes(label=ifelse(name%in%countriesWorst$name,name,"")))
countries$label=ifelse(countries$name%in%countriesWorst$name,countries$name,"")
countries$label
baseScatter=ggplot(data=countries) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites,
size=C3_GroupGrievance))
scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(size=C3_GroupGrievance))
scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(label=label))
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
baseScatter
baseScatter+geom_point(aes(size=C3_GroupGrievance))
scatter1=baseScatter+geom_point(aes(size=C3_GroupGrievance))
scatter1=scatter1 + facet_wrap(~continent)
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(size=C3_GroupGrievance))
scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
countriesWorst=countries %>% group_by(continent) %>% top_n(1, Total)
countriesBest=countries %>% group_by(continent) %>% top_n(-1, Total)
#countriesWorst$name
#countriesBest$name
countries$label=ifelse(countries$name%in%countriesWorst$name,countries$name,"")
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(aes(size=C3_GroupGrievance))
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point()
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(color='grey90')
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.1)
scatter1=baseScatter+geom_point(color='grey90',shape = 21)
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.1)
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.1)
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1)
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1) +
+ scale_fill_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1) +
+ scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label)
scatter1 + geom_text_repel(aes(label=label))
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label))
View(countriesWorst)
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
#scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.05) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.05,max.overlaps = 5) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.05,max.overlaps = 10) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1,max.overlaps = 10) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
?geom_text_repel
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1,max.overlaps = 20) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label,color=continent),min.segment.length = 0.1,max.overlaps = 30) +
scale_color_manual(values = c("green", "blue", "grey","red","black"))
scatter1 + geom_text_repel(aes(label=label))
scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.1)
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
scatter1=scatter1 + facet_wrap(~continent)
library(ggrepel)
scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.1)
saveRDS(scatter1, file = "scatter1.rds")
scatter1
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
scatter1=scatter1 + facet_wrap(~continent)
scatter1=scatter1 + geom_text_repel(aes(label=label),min.segment.length = 0.05)
saveRDS(scatter1, file = "scatter1.rds")
scatter1
choro1
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
scatter1=scatter1 + facet_wrap(~continent)
scatter1=scatter1 + geom_text_repel(aes(label=label,size=C3_GroupGrievance),min.segment.length = 0.05)
scatter1
worstAndBest=c(countriesWorst$name,countriesBest$name)
worstAndBest
countries$label=ifelse(countries$name%in%C3_GroupGrievance,countries$name,"")
countries$label
worstAndBest
countries$label=ifelse(countries$name%in%worstAndBest,countries$name,"")
baseScatter=ggplot(data=countries,aes(x=C1_SecurityApparatus,
y=C2_FactionalizedElites)) + theme_linedraw()
scatter1=baseScatter+geom_point(color='grey60',shape = 21)
scatter1=scatter1 + facet_wrap(~continent)
scatter1=scatter1 + geom_text_repel(aes(label=label,size=C3_GroupGrievance),min.segment.length = 0.05)
scatter1
saveRDS(scatter1, file = "scatter1.rds")
setwd("/Users/JoseManuel/Documents/GITHUBs/PUCP/ASIES/codes")
saveRDS(choro1, file = "choro1.rds")
saveRDS(scatter1, file = "scatter1.rds")
library(leaflet)
install.packages("leaflet")
library(leaflet)
factpal <- colorFactor(topo.colors(5), countries$Total_jc5_cat)
leaflet(countries) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addPolygons(label=name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addPolygons(label=countries$name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addPolygons(label=countries$name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addProviderTiles()%>%
addPolygons(label=countries$name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
?colorFactor
factpal <- colorFactor(c("green", "blue", "grey","red","black"), countries$Total_jc5_cat)
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE,
smoothFactor = 0.2, fillOpacity = 1,
opacity = 0.5,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE,
smoothFactor = 0.2, fillOpacity = 1,
fillOpacity = 0.5,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE,
smoothFactor = 0.2, fillOpacity = 0.6,
color = ~factpal(Total_jc5_cat))
leaflet(countries) %>%
addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE,
smoothFactor = 0.2, fillOpacity = 0.6,
color = ~factpal(Total_jc5_cat))%>%
addLegend("bottomright", pal = factpal,
values = ~Total_jc5_cat,
title = "Fragility",
opacity = 1)
leaflet1=leaflet(countries) %>%addTiles()%>%
addPolygons(label=countries$name,stroke = FALSE,
smoothFactor = 0.2, fillOpacity = 1,
color = ~factpal(Total_jc5_cat)) %>%
addLegend("bottomright", pal = factpal,
values = ~Total_jc5_cat,
title = "Fragility",
opacity = 1)
saveRDS(leaflet1, file = "leaflet1.rds")
saveRDS(leaflet1, file = "leaflet1.rds")
baseHist=ggplot(data=countries,aes(x=Total_jc5_cat))
baseHist + geom_histogram()
baseHist=ggplot(data=countries,aes(x=Total))
baseHist + geom_histogram()
baseHist=ggplot(data=countries,aes(x=Total))
hist1=baseHist + geom_histogram()
hist1
saveRDS(hist1, file = "hist1.rds")
